def tensor_product(a, b):
    # Ensures input arrays are numpy arrays
    a = np.array(a)
    b = np.array(b)

    # Finds shapes of input arrays
    shape_a = a.shape
    shape_b = b.shape

    #getting the correct shape of the new tensor product
    new_shape = tuple(x * y for x, y in zip(shape_a, shape_b))
    #creating an empty array with correct shape
    result = np.zeros(new_shape, dtype=int)

    a_flat = a.flatten()

    b_flat = b.flatten()

	# makes a_flat a column vector, then multiplies by the row vector b_flat to make a matrix of (len(a_flat), len(b_flat))
    product = a_flat[:, np.newaxis] * b_flat
	
	# returns the tensor product in the calculated shape 
    return product.reshape(result.shape)
